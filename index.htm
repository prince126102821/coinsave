<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>零錢存錢管理</title>
    <script src="https://apis.google.com/js/api.js"></script>
    <style>
        body { font-family: Arial, sans-serif; background-color: #f9f9f9; margin: 0; padding: 0; }
        header { background-color: #4CAF50; color: white; padding: 1em; text-align: center; }
        main { padding: 1em; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 1em; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-radius: 8px; }
        footer { text-align: center; padding: 1em; background-color: #4CAF50; color: white; position: fixed; bottom: 0; width: 100%; }
        #totalAmount { font-weight: bold; margin-top: 10px; }
    </style>
</head>
<body>
    <header>
        <h1>零錢存錢管理</h1>
    </header>
    <main>
        <div class="container">
            <h2>我的存錢計畫</h2>
            <form id="savingForm">
                <label for="date">日期：</label>
                <input type="date" id="date" required>
                <br><br>
                <label for="coinType">零錢種類：</label>
                <select id="coinType">
                    <option value="1">1元</option>
                    <option value="5">5元</option>
                    <option value="10">10元</option>
                    <option value="50">50元</option>
                </select>
                <br><br>
                <label for="amount">數量：</label>
                <input type="number" id="amount" min="1" required>
                <br><br>
                <button type="button" id="depositButton">存款</button>
                <button type="button" id="withdrawButton">提款</button>
            </form>
            <button id="statisticsButton" style="margin-top: 10px;">統計零錢數量</button>
            <button id="clearButton" style="margin-top: 10px;">清除所有資料</button>
            <div id="totalAmount">總額：0元</div>
            <h2>存款紀錄</h2>
            <table border="1" width="100%">
                <thead>
                    <tr>
                        <th>日期</th>
                        <th>零錢種類</th>
                        <th>數量</th>
                        <th>總金額</th>
                    </tr>
                </thead>
                <tbody id="recordTable"></tbody>
            </table>
        </div>
    </main>
    <script>
        const SPREADSHEET_ID = '1yj9dRIJ3TLUMjV7PF_LiOrzdlKqxcPDIIbzfgZWdQIE';
        const API_KEY = 'AIzaSyCSQjYO3t0v15FqU5nUGQH_gr3hLDxX9CM';
        const SHEET_RANGE = '工作表1!A:D'; // 確保與你的工作表名稱一致

        let totalAmount = 0;
        const coinCounts = { '1元': 0, '5元': 0, '10元': 0, '50元': 0 };

        function initClient() {
            gapi.client.init({ apiKey: API_KEY })
            .then(() => gapi.client.load('sheets', 'v4'))
            .then(() => {
                console.log("Google Sheets API 初始化完成");
                getRecords();
            })
            .catch((error) => {
                console.error("API 初始化失敗：", error);
                alert("API 初始化失敗，請檢查 API 金鑰或試算表 ID。");
            });
        }

        gapi.load("client", initClient);

        async function addRecord(date, coinType, amount, isDeposit) {
            try {
                const total = coinType * amount * (isDeposit ? 1 : -1);
                const values = [[date, `${coinType}元`, amount * (isDeposit ? 1 : -1), `${total}元`]];
                coinCounts[`${coinType}元`] += isDeposit ? amount : -amount;

                const response = await gapi.client.sheets.spreadsheets.values.append({
                    spreadsheetId: SPREADSHEET_ID,
                    range: SHEET_RANGE,
                    valueInputOption: 'USER_ENTERED', // 使用者格式
                    resource: { values },
                });

                console.log("新增成功：", response);
                alert(`${isDeposit ? '存款' : '提款'}已成功新增！`);

                const table = document.getElementById('recordTable');
                const newRow = table.insertRow(0);
                values[0].forEach(cell => {
                    const newCell = newRow.insertCell();
                    newCell.textContent = cell;
                });

                totalAmount += total;
                document.getElementById('totalAmount').textContent = `總額：${totalAmount}元`;
            } catch (error) {
                console.error("新增紀錄失敗：", error);
                const errorMessage = error?.result?.error?.message || '未知錯誤';
                alert(`新增紀錄失敗，錯誤訊息：${errorMessage}`);
            }
        }

        async function getRecords() {
            try {
                const response = await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: SPREADSHEET_ID,
                    range: SHEET_RANGE,
                });

                const rows = response.result.values || [];
                const table = document.getElementById('recordTable');
                table.innerHTML = '';
                totalAmount = 0;

                for (let key in coinCounts) {
                    coinCounts[key] = 0;
                }

                rows.reverse().forEach(row => {
                    const newRow = table.insertRow(0);
                    row.forEach(cell => {
                        const newCell = newRow.insertCell();
                        newCell.textContent = cell;
                    });

                    const rowTotal = parseInt(row[3].replace('元', '')) || 0;
                    totalAmount += rowTotal;

                    const coinType = row[1];
                    const amount = parseInt(row[2]) || 0;
                    if (coinCounts[coinType] !== undefined) {
                        coinCounts[coinType] += amount;
                    }
                });

                document.getElementById('totalAmount').textContent = `總額：${totalAmount}元`;
            } catch (error) {
                console.error("讀取紀錄失敗：", error);
                const errorMessage = error?.result?.error?.message || '未知錯誤';
                alert(`讀取紀錄失敗，錯誤訊息：${errorMessage}`);
            }
        }

        async function clearRecords() {
            try {
                await gapi.client.sheets.spreadsheets.values.clear({
                    spreadsheetId: SPREADSHEET_ID,
                    range: SHEET_RANGE,
                });
                alert('所有資料已清除！');
                getRecords();
            } catch (error) {
                console.error("清除資料失敗：", error);
                const errorMessage = error?.result?.error?.message || '未知錯誤';
                alert(`清除資料失敗，錯誤訊息：${errorMessage}`);
            }
        }

        document.getElementById('depositButton').addEventListener('click', async () => {
            const date = document.getElementById('date').value;
            const coinType = parseInt(document.getElementById('coinType').value);
            const amount = parseInt(document.getElementById('amount').value);
            await addRecord(date, coinType, amount, true);
            document.getElementById('savingForm').reset();
        });

        document.getElementById('withdrawButton').addEventListener('click', async () => {
            const date = document.getElementById('date').value;
            const coinType = parseInt(document.getElementById('coinType').value);
            const amount = parseInt(document.getElementById('amount').value);
            await addRecord(date, coinType, amount, false);
            document.getElementById('savingForm').reset();
        });

        document.getElementById('clearButton').addEventListener('click', clearRecords);

        document.getElementById('statisticsButton').addEventListener('click', function() {
            let message = '目前各種零錢的數量如下：\n';
            for (const [coin, count] of Object.entries(coinCounts)) {
                message += `${coin}: ${count} 個\n`;
            }
            message += `總額：${totalAmount}元`;
            alert(message);
        });
    </script>
</body>
</html>
